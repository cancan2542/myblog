---
import Layout from '../../layouts/Layout.astro';

type BlogItem = {
  id: string;
  title: string;
  body: string;
};

export async function getStaticPaths() {
  const API_URL = import.meta.env.MICROCMS_API_URL;
  const API_KEY = import.meta.env.MICROCMS_API_KEY;

  if (!API_URL) throw new Error('MICROCMS_API_URL is undefined');
  if (!API_KEY) throw new Error('MICROCMS_API_KEY is undefined');

  const res = await fetch(API_URL, {
    headers: { 'X-API-KEY': API_KEY }
  });
  const data: { contents: BlogItem[] } = await res.json();

  return data.contents.map((item) => ({
    params: { id: item.id }
  }));
}

const { id } = Astro.params;
const API_URL = `${import.meta.env.MICROCMS_API_URL}/${id}`;
const API_KEY = import.meta.env.MICROCMS_API_KEY;

let data: { title: string; body: string } = { title: '', body: '' };
let error = '';

try {
  if (!API_URL) throw new Error('MICROCMS_API_URL is undefined');
  if (!API_KEY) throw new Error('MICROCMS_API_KEY is undefined');

  const res = await fetch(API_URL, {
    headers: { 'X-API-KEY': API_KEY }
  });
  if (!res.ok) {
    error = `APIエラー: ${res.status} ${res.statusText}`;
  } else {
    data = await res.json();
  }
} catch (e) {
  const err = e as Error;
  error = `通信エラー: ${err.message}`;
}
---

<Layout>
  {error
    ? <p style="color:red">{error}</p>
    : (
      <>
        <h2>{data.title}</h2>
        <div set:html={data.body}></div>
      </>
    )
  }
</Layout>